#! /usr/bin/env python3
# -*- Python -*-
# Copyright (c) 2016, The Center For Pathogen Evolution, Department of Zoology, University of Cambridge, UK
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE CENTER FOR PATHOGEN EVOLUTION BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

error Obsolete, use tre-seqdb

"""
Reads json in the phylogenetic-tree-v1 format produced by newick2json,
reads seqdb ("sequence-database-v1"),
updates tree with clade for each leaf node.
"""

import sys, os, re, json, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

def main(args):
    exit_code = 0
    try:
        data = load_tree(args.source[0])
        seqdb = load_seqdb(os.path.expandvars(os.path.expanduser(args.path_to_db)))
#        sequences = translate_to_amino_acid(decode_names(load_fasta(fasta_file)))
#        subtype = detect_subtype(sequences)
#        sequences = trim_initial_by_subtype(sequences, subtype)
#        clade_desc = load_clade_desc(clade_desc_file, subtype)
        add_clade(data["tree"], seqdb)
        save_tree(args.result[0], data)
    except Exception as err:
        print('ERROR: cannot execute command:', err, traceback.format_exc())
        exit_code = 1
    return exit_code

# ======================================================================

def add_clade(data, seqdb):
    clades = {}
    nodes = {"c": 0}

    def add_clade_r(node):
        # global clades, nodes, clade_desc, sequences
        if node.get("name"):
            nodes["c"] += 1
            if "clades" in node: del node["clades"]   # delete old data
            seq = find_name_in_seqdb(seqdb, node["name"])
            if seq:
                if seq.get("clades"):
                    node["clades"] = seq["clades"]
                    for c in seq["clades"]:
                        clades.setdefault(c, 0)
                        clades[c] += 1
            else:
                pass # logging.warning("No sequence for {}".format(node["name"]))
        if node.get("subtree"):
            for e in node["subtree"]:
                add_clade_r(e)

    add_clade_r(data)
    logging.info('Nodes: {}  Clades {}'.format(nodes["c"], clades))

# ----------------------------------------------------------------------

def find_name_in_seqdb(seqdb, raw_name):
    raw_name = raw_name.replace("/HUMAN/", "/")
    seq = find_hi_name_in_seqdb(seqdb, raw_name)
    if seq is None:
        name, passage = split_name(raw_name)
        if name is not None:
            e1 = seqdb.get(name)
            if e1:
                for e2 in e1["data"]:
                    if passage in e2["passages"]:
                        seq = e2
                        break
                else:
                    module_logger.warning('No passage {!r} {!r} in seqdb'.format(name, passage))
            else:
                module_logger.warning('No {!r} in seqdb'.format(name))
        else:
            module_logger.warning('No {!r} in seqdb'.format(raw_name))
    return seq

# ----------------------------------------------------------------------

def find_hi_name_in_seqdb(seqdb, raw_name):
    for e1 in seqdb.values():
        for e2 in e1["data"]:
            if e2.get("hi_name") == raw_name:
                return e2
    return None

# ----------------------------------------------------------------------

sReYear = re.compile(r"^/(19[0-9][0-9]|20[0-2][0-9])$")

def split_name(raw_name):
    name = None
    passage = None
    if raw_name[:2] == "B/" or raw_name[:8] in ["A(H1N1)/", "A(H2N3)/"]:
        fields = raw_name.split()
        for name_parts in range(len(fields)):
            if sReYear.match(fields[name_parts][-5:]):
                name = " ".join(fields[:name_parts + 1])
                passage = " ".join(fields[name_parts + 1:])
                break
    return name, passage

# ----------------------------------------------------------------------

def load_tree(filename):
    data = json.load(sys.stdin if filename == "-" else open(filename))
    if data.get("  version") != "phylogenetic-tree-v1" or not isinstance(data.get("tree"), dict):
        raise RuntimeError("Unrecognized source data")
    return data

# ----------------------------------------------------------------------

def load_seqdb(filename):
    import lzma
    data = json.loads(lzma.LZMAFile(filename).read().decode('utf-8'))
    if data.get("  version") != "sequence-database-v1":
        raise RuntimeError("Unrecognized sequence database version: {}".data.get("  version"))
    return data["1-names"]

# ----------------------------------------------------------------------

def save_tree(filename, data):
    json.dump(data, sys.stdout if filename == "-" else open(filename, "w"), indent=2, separators=(',', ': '), sort_keys=True)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('source', nargs=1, help='source tree in the phylogenetic-tree-v1 format produced by newick2json.')
    parser.add_argument('result', nargs=1, help='resulting tree in the phylogenetic-tree-v1 format.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
