#! /usr/bin/env python3
# -*- Python -*-
# license
# Copyright (c) 2016, The Center For Pathogen Evolution, Department of Zoology, University of Cambridge, UK
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE CENTER FOR PATHOGEN EVOLUTION BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# license.

"""
Reads json in the phylogenetic-tree-v1 format produced by newick2json,
updates it with continent for each leaf node using acmacs API, dumps
resulting json.
"""

import sys
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import os, re, urllib.request, json, traceback, pprint, logging, datetime, lzma

# ======================================================================

def main(options, source_file, result_file):
    exit_code = 0
    try:
        data = load_tree(source_file)
        # names = ["B/HUMAN/DARWIN/26/2011 MDCK1 VICTORIA", "UR 111"]
        decoded_names = {name: decode_name(name) for name in collect_names(data["tree"])}
        logging.info("{} names found in the source".format(len(decoded_names)))
        names = sorted(set(decoded_names.values()))
        logging.info("{} unique names found in the source".format(len(decoded_names)))
        api = API(url_prefix=options.url_prefix)
        response = api.execute({"C": "location_continent_of_name", "names": names})
        # print(json.dumps(response, indent=2, sort_keys=True))
        mapping = dict(zip(names, response["continents"]))
        # pprint.pprint(mapping)
        report_unknown(mapping)
        add_continents(data["tree"], mapping, decoded_names)
        data.setdefault("updated", []).append({"program": sys.argv[0], "date": str(datetime.datetime.now()), "user": os.environ["USER"]})
        save_tree(result_file, data)
    except Exception as err:
        print('ERROR: cannot execute command:', err, traceback.format_exc())
        exit_code = 1
    return exit_code

# ======================================================================

def collect_names(data):
    return ([data["name"]] if not data.get("subtree") and data.get("name") else []) + sum((collect_names(e) for e in data.get("subtree", [])), [])

# ----------------------------------------------------------------------

def add_continents(data, mapping, decoded_names):
    if not data.get("subtree"):
        if data.get("name"):
            continent = mapping.get(decoded_names[data["name"]])
            if continent and continent != 'UNKNOWN':
                data["continent"] = continent
    else:
        for e in data["subtree"]:
            add_continents(e, mapping, decoded_names)

# ----------------------------------------------------------------------

class CommandError (Exception):
    """Raised by api._execute if command resposne contains error and raise_error flag is set."""

# ======================================================================

class API:

    def __init__(self, url_prefix='https://localhost:1168'):
        self.url_prefix = url_prefix

    def execute(self, command):
        if self.url_prefix:
            response = self._execute_http(command)
        else:
            raise ValueError('No url_prefix')
        if isinstance(response, dict) and response.get('E'):
            raise CommandError(response['E'])
        return response

    def _execute_http(self, command):
        command['F'] = 'json'
        if "localhost" in self.url_prefix:
            import ssl
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
        else:
            context = None
        # print(command)
        command_data = json.dumps(command).encode('utf-8')
        response = urllib.request.urlopen(url='{}/api'.format(self.url_prefix), data=command_data, context=context).read()
        return json.loads(response.decode('utf-8'))

# ======================================================================

sReDecodeName = re.compile(r"__.*")

def decode_name(name):
    return sReDecodeName.sub("", name)

# ----------------------------------------------------------------------

def load_tree(filename):
    if filename == "-":
        f = sys.stdin
    elif filename[-3:] == ".xz":
        f = lzma.LZMAFile(filename)
    else:
        f = open(filename)
    data_s = f.read()
    if isinstance(data_s, bytes):
        data_s = data_s.decode('utf-8')
    data = json.loads(data_s)
    if data.get("  version") != "phylogenetic-tree-v1" or not isinstance(data.get("tree"), dict):
        raise RuntimeError("Unrecognized source data")
    return data

# ----------------------------------------------------------------------

def save_tree(filename, data):
    if filename != "-":
        backup_file(filename)
    # json.dump(data, sys.stdout if filename == "-" else open(filename, "w"), indent=2, separators=(',', ': '), sort_keys=True)
    data_s = json_dumps(data, 1, 1)
    if filename == "-":
        f = sys.stdout
    elif filename[-3:] == ".xz":
        f = lzma.LZMAFile(filename, "w")
        data_s = data_s.encode("utf-8")
    else:
        f = open(filename, "w")
    f.write(data_s)

# ----------------------------------------------------------------------

def backup_file(filename, backup_dir=None):
    """Backup the file, if it exists. Backups versioning is supported."""
    if isinstance(backup_dir, str):
        newname = os.path.join(backup_dir, os.path.basename(filename))
    else:
        newname = filename
    version = 1
    while os.access(newname, os.F_OK):
        newname = '{}.~{:02d}~'.format(filename, version)
        version += 1
    if newname != filename:
        #module_logger.debug("Backing up file: {} --> {}".format(filename, newname))
        try:
            os.rename(filename, newname)
        except Exception as err:
            module_logger.warning('Cannot create backup copy of {}: {}'.format(filename, err), exc_info=True)

# ----------------------------------------------------------------------

def json_dumps(data, indent=2, indent_increment=2):

    def simple(d):
        r = True
        if isinstance(d, dict):
            r = not any(isinstance(v, (list, tuple, set, dict)) for v in d.values())
        elif isinstance(d, (tuple, list)):
            r = not any(isinstance(v, (list, tuple, set, dict)) for v in d)
        return r

    def end(symbol, indent):
        if indent > indent_increment:
            r = "{:{}s}{}".format("", indent - indent_increment, symbol)
        else:
            r = symbol
        return r

    r = []
    if simple(data):
        r.append(json.dumps(data, sort_keys=True))
    else:
        if isinstance(data, dict):
            r.append("{")
            for no, k in enumerate(sorted(data), start=1):
                comma = "," if no < len(data) else ""
                r.append('{:{}s}"{}": {}{}'.format("", indent, k, json_dumps(data[k], indent + indent_increment, indent_increment), comma))
            r.append(end("}", indent))
        elif isinstance(data, (tuple, list)):
            r.append("[")
            for no, v in enumerate(data, start=1):
                comma = "," if no < len(data) else ""
                r.append('{:{}s}{}{}'.format("", indent, json_dumps(v, indent + indent_increment, indent_increment), comma))
            r.append(end("]", indent))
    return "\n".join(r)

# ----------------------------------------------------------------------

def report_unknown(mapping):
    unknown = sorted(n for n,c in mapping.items() if c == "UNKNOWN")
    if unknown:
        print("Warning: cannot find continent for the following names (", len(unknown), ")\n  ", "\n  ".join(unknown), sep="", file=sys.stderr)

# ----------------------------------------------------------------------

try:
    import optparse
    parser = optparse.OptionParser(usage='%prog [options] <source-tree.json> <resulting-tree.json>')
    parser.add_option('--acmacs', action='store', dest='url_prefix', default='https://localhost:1168', help='AcmacsWeb server host and port, e.g. https://localhost:1168.')
    parser.add_option('--debug', action='store_true', dest='debug', default=False, help='Enable debugging output.')
    (options, args) = parser.parse_args()
    logging_format = "%(levelname)s {asctime}: %(message)s"
    if options and options.debug:
        logging.basicConfig(level=logging.DEBUG, format=logging_format)
    else:
        logging.basicConfig(level=logging.INFO, format=logging_format)
    if len(args) != 2:
        exit_code = 1
        print("Error: two arguments at command line expected", file=sys.stderr)
        parser.print_usage()
    else:
        exit_code = main(options, args[0], args[1])
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
