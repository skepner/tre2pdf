#! /usr/bin/env python3
# -*- Python -*-
# Copyright (c) 2016, The Center For Pathogen Evolution, Department of Zoology, University of Cambridge, UK
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE CENTER FOR PATHOGEN EVOLUTION BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Reads json in the phylogenetic-tree-v1 format produced by newick2json,
reads seqdb ("sequence-database-v2"),
updates tree with clade and amino-acid information for each leaf node.
"""

import sys, os, re, json, traceback, collections, pprint, lzma
from pathlib import Path
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

def main(args):
    exit_code = 0
    try:
        data = load_tree(args.source[0])
        seqdb = SeqDb(args.path_to_db)
        if args.add_clade_information:
            add_clade(data["tree"], seqdb)
        if args.pos is not None:
            add_amino_acid_at(data["tree"], seqdb, args.pos)
        if args.branch_annotations:
            add_branch_annotations(data["tree"])
            update_branch_annotation_settings(data)
        if args.branch_ids:
            add_branch_ids(data["tree"])
        if args.remove_aa_at:
            remove_aa_at(data["tree"])
        save_tree(args.result[0], data)
    except Exception as err:
        print('ERROR: cannot execute command:', err, traceback.format_exc())
        exit_code = 1
    return exit_code

# ======================================================================

def add_clade(data, seqdb):
    clades = {}
    nodes = {"c": 0}

    def add_clade_r(node):
        # global clades, nodes, clade_desc, sequences
        if not node.get("subtree"):
            if node.get("name"):
                nodes["c"] += 1
                if "clades" in node: del node["clades"]   # delete old data
                seq = seqdb.find_name(node["name"])
                if seq:
                    if seq.get("c"):
                        node["clades"] = seq["c"]
                        for c in seq["c"]:
                            clades.setdefault(c, 0)
                            clades[c] += 1
                else:
                    pass # logging.warning("No sequence for {}".format(node["name"]))
        else:
            for e in node["subtree"]:
                add_clade_r(e)

    add_clade_r(data)
    logging.info('Nodes: {}  Clades {}'.format(nodes["c"], clades))

# ----------------------------------------------------------------------

def add_amino_acid_at(data, seqdb, poss, ignore_X=True):
    if poss == "all":
        pp = None
    else:
        pp = {p: int(p) for p in poss.split(",")}

    def del_old(node):
        if pp is None:
            try:
                del node["aa_at"]
            except:
                pass
        elif node.get("aa_at"):
            for p in pp:
                try:
                    del node["aa_at"][p]
                except:
                    pass

    def update_aa_at(x, a):
        for k, v in a.items():
            if k in x:
                x[k] = "".join(sorted(set(x[k]) | set(v)))
            else:
                x[k] = v

    def pos_gen(size):
        for pos in range(1, size + 1):
            yield str(pos), pos

    def add_aa_r(node):
        del_old(node)
        aa_at = node["aa_at"] = {}        # reset
        if not node.get("subtree"):
            rn = 1
            if node.get("name"):
                seq = seqdb.find_name(node["name"])
                if seq and seq.get("a") and seq.get("s") is not None:
                    ls = len(seq["a"])
                    if pp is None:
                        sp = pos_gen(len(seq["a"]) - seq["s"])
                    else:
                        sp = pp.items()
                    for s, p in sp:
                        pos = p - seq["s"] - 1
                        if pos >= 0 and pos < ls:
                            aa = seq["a"][pos]
                            if not ignore_X or aa != "X":
                                aa_at[s] = aa   # note dict key must be str to be properly saveable and loadable into/from json
        else:
            rn = 0
            for subtree in node["subtree"]:
                s_rn, s_aa_at = add_aa_r(subtree)
                update_aa_at(aa_at, s_aa_at)
                rn += s_rn
            node["number_strains"] = rn
        return rn, aa_at

    add_aa_r(data)

# ----------------------------------------------------------------------

def add_branch_annotations(data):


    def edge_r(node, offset):
        this_edge_length = node["edge_length"]
        if node.get("subtree"):
            r = []
            for subtree in node["subtree"]:
                r += edge_r(subtree, offset + this_edge_length)
        else:
            r = [[this_edge_length + offset, node]]
        return r

    def use_node(pos, parent, my_parent, offset):
        max_offset = my_parent["edge_length"] + offset
        edges_nodes = sum((edge_r(subtree, 0) for subtree in parent["subtree"] if subtree is not my_parent), [])
        edges_nodes = sorted((e for e in edges_nodes if e[0] < max_offset), key=lambda e: e[0], reverse=True)
        if edges_nodes:
            r = edges_nodes[0][1]
        else:
            r = None
        return r

    def exclude_if_parent(parent_names, pos, transition):
        pn = parent_names.get(pos)
        return pn is not None and pn[1] == transition[1]   # just the "to" in transition matters

    # def copy_extend(d1, d2):
    #     r = {}
    #     r.update(d1)
    #     r.update(d2)
    #     return r

    def decode_tr_name(names):
        return ((e[1:-1], e[0] + e[-1]) for e in (names or "").split())

    class NameEmpty (Exception): pass

    def encode_tr_name(names):
        r = " ".join("{}{}{}".format(names[p][0], p, names[p][1]) for p in sorted(names, key=lambda pos: int(pos)) if names[p][0] != names[p][1])
        if not r:
            raise NameEmpty()
        return r

    def ba_r(node, parents=[], parent_names={}):
        nonlocal annotations
        if node.get("subtree"):
            if node.get("name"): del node["name"]
            names = {}                    # pos to subst
            if len(parents) > 1:
                # print([p.get("name") for p in parents], node["aa_at"])
                for pos, aa in node["aa_at"].items():
                    if len(aa) == 1:
                        offset = 0
                        for p_no in range(1, len(parents)):
                            chosen_node = use_node(pos, parents[- p_no - 1], parents[- p_no], offset)
                            if chosen_node is not None:
                                chosen_node_aa = chosen_node["aa_at"].get(pos) # can be absent if "X"
                                if chosen_node_aa is not None: # note that may lead to say "KK", those will be eliminated when name is built below, having "KK" is necessary to incorrect names (incorrect from part) in the child branches
                                    names[pos] = chosen_node_aa + aa
                                break
                            offset += parents[- p_no]["edge_length"]
                        # else:
                        #     names.append("?{}{}".format(pos, aa))
                names = {p: s for p, s in names.items() if not exclude_if_parent(parent_names, p, s)}                # exclude names already shown in parents
                try:
                    node["name"] = encode_tr_name(names)
                    annotations[node["name"]] += 1
                except NameEmpty:
                    pass
            names_for_subtree = {**parent_names, **names}
            for subtree in node["subtree"]:
                ba_r(subtree, parents=parents + [node], parent_names=names_for_subtree)

    # If multiple immediate child nodes have the same branch annotations, that
    # annotation is added to their parent, redundant child annotations removed,
    # child annotations for the same position but other transition updated
    # (actually updated their left side to match right side of the annotation
    # added to parent.)
    def ba_compact_r(node, parent_names={}):
        updated = 0

        def add_to_parent(names):
            subnames = {}
            for subtree in node["subtree"]:
                if subtree.get("subtree"):
                    for pos, tr in decode_tr_name(subtree.get("name")):
                        subnames.setdefault(pos, collections.defaultdict(int))[tr] += 1
            for pos, v in subnames.items():
                vs = sorted(v.items(), key=lambda e: e[1], reverse=True)
                if vs[0][1] > 1 and vs[0][0] not in names:
                    names[pos] = vs[0][0]

        def update_name(names):
            nonlocal updated_annotations, updated
            try:
                new_name = encode_tr_name(names)
                if new_name != node.get("name"):
                    node["name"] = new_name
                    updated_annotations[new_name] += 1
                    updated += 1
            except NameEmpty:
                if "name" in node:
                    del node["name"]
                    updated_annotations[""] += 1
                    updated += 1

        def update_child(names):
            if parent_names and names:
                for pos in names:
                    ptr = parent_names.get(pos)
                    if ptr:
                        names[pos] = ptr[1] + names[pos][1]
            return names

        if node.get("subtree"):
            names = dict(decode_tr_name(node.get("name")))
            update_child(names)
            add_to_parent(names)
            update_name(names)
            names_for_subtree = {**parent_names, **names}
            for subtree in node["subtree"]:
                updated += ba_compact_r(subtree, parent_names=names_for_subtree)
        return updated

    annotations = collections.defaultdict(int)
    # first pass
    ba_r(data)
    module_logger.info('Annotations\n{}'.format(pprint.pformat(dict(annotations), width=1)))

    pass_no  = 1
    while False:
        # second pass: reduce number of labels by moving labels from multiple children to their parent
        updated_annotations = collections.defaultdict(int)
        if not ba_compact_r(data):        # repeat until there are no updates
            break
        if updated_annotations:
            module_logger.info('Updated annotations (pass: {})\n{}'.format(pass_no, pprint.pformat(dict(updated_annotations), width=1)))
        pass_no += 1

# ----------------------------------------------------------------------

def update_branch_annotation_settings(data):
    branch_annotations_all = {
        "show": True,
        "color": "#000000",
        "font_size_comment": "Negative value means use this factor (abs value) for the strain label font size",
        "font_size": -1,
        "label_offset_x": 0.0,
        "label_offset_y": 0.0,
        "label_interleave": 1.2,
        "show_line": False,
        "line_color": "#000000",
        "line_width": 0.5,
        "line_x": -10.0,
        "line_y": 5.0
        }
    data["_settings"]["tree"].setdefault("branch_annotations_all", branch_annotations_all)

    # def transitions_r(node):
    #     transitions = set()
    #     if node.get("subtree"):
    #         for subtree in node["subtree"]:
    #             transitions |= transitions_r(subtree)
    #         if node.get("name"):
    #             transitions.add(node["name"])
    #     return transitions

    # bas = data["_settings"]["tree"].setdefault("branch_annotations", [])
    # for tr in transitions_r(data["tree"]):
    #     if not any(e for e in bas if e["_id"] == tr):
    #         bas.append({"_id": tr, "color": "#000000", "font_size": 9, "label": "\n".join(tr.split()), "label_interleave": 1.2, "label_offset_x": 0, "label_offset_y": 0, "line_color": "#000000", "line_width": 0.5, "line_x": -10, "line_y": 5, "show": True, "show_line": False})

# ----------------------------------------------------------------------

def add_branch_ids(data):

    def path_simple(path, no):
        if not path or len(path[-1]) == 1:
            r = str(no)
        else:
            r = ".{}".format(no)
        return path + [r]

    def path_many(path, no):
        if not path:
            r = str(no)
        else:
            r = ".{}".format(no)
        return path + [r]

    def add_id_r(node, path=[]):
        if node.get("subtree"):
            node["id"] = "".join(path)
            path_gen = path_simple if len(node["subtree"]) <= 10 else path_many
            for no, subtree in enumerate(node["subtree"]):
                add_id_r(subtree, path_gen(path, no))

    add_id_r(data)

# ----------------------------------------------------------------------

def remove_aa_at(data):

    def remove_aa_at_r(node):
        try:
            del node["aa_at"]
        except:
            pass
        for subtree in node.get("subtree", []):
            remove_aa_at_r(subtree)

    remove_aa_at_r(data)

# ----------------------------------------------------------------------

def load_tree(filename):
    if filename == "-":
        f = sys.stdin
    elif filename[-3:] == ".xz":
        f = lzma.LZMAFile(filename)
    else:
        f = open(filename)
    data = json.loads(f.read().decode('utf-8'))
    if data.get("  version") != "phylogenetic-tree-v1" or not isinstance(data.get("tree"), dict):
        raise RuntimeError("Unrecognized source data")
    return data

# ----------------------------------------------------------------------

def json_dumps(data, indent=2, indent_increment=2):

    def simple(d):
        r = True
        if isinstance(d, dict):
            r = not any(isinstance(v, (list, tuple, set, dict)) for v in d.values())
        elif isinstance(d, (tuple, list)):
            r = not any(isinstance(v, (list, tuple, set, dict)) for v in d)
        return r

    def end(symbol, indent):
        if indent > indent_increment:
            r = "{:{}s}{}".format("", indent - indent_increment, symbol)
        else:
            r = symbol
        return r

    r = []
    if simple(data):
        r.append(json.dumps(data, sort_keys=True))
    else:
        if isinstance(data, dict):
            r.append("{")
            for no, k in enumerate(sorted(data), start=1):
                comma = "," if no < len(data) else ""
                r.append('{:{}s}"{}": {}{}'.format("", indent, k, json_dumps(data[k], indent + indent_increment, indent_increment), comma))
            r.append(end("}", indent))
        elif isinstance(data, (tuple, list)):
            r.append("[")
            for no, v in enumerate(data, start=1):
                comma = "," if no < len(data) else ""
                r.append('{:{}s}{}{}'.format("", indent, json_dumps(v, indent + indent_increment, indent_increment), comma))
            r.append(end("]", indent))
    return "\n".join(r)

# ----------------------------------------------------------------------

def save_tree(filename, data):
    if filename != "-":
        backup_file(filename)
    # json.dump(data, sys.stdout if filename == "-" else open(filename, "w"), indent=2, separators=(',', ': '), sort_keys=True)
    if filename == "-":
        f = sys.stdout
    elif filename[-3:] == ".xz":
        f = lzma.LZMAFile(filename, "w")
    else:
        f = open(filename, "w")
    f.write(json_dumps(data, 1, 1).encode("utf-8"))

# ----------------------------------------------------------------------

def backup_file(filename, backup_dir=None):
    """Backup the file, if it exists. Backups versioning is supported."""
    if isinstance(backup_dir, str):
        newname = os.path.join(backup_dir, os.path.basename(filename))
    else:
        newname = filename
    version = 1
    while os.access(newname, os.F_OK):
        newname = '{}.~{:02d}~'.format(filename, version)
        version += 1
    if newname != filename:
        #module_logger.debug("Backing up file: {} --> {}".format(filename, newname))
        try:
            os.rename(filename, newname)
        except Exception as err:
            module_logger.warning('Cannot create backup copy of {}: {}'.format(filename, err), exc_info=True)

# ----------------------------------------------------------------------

class SeqDb:

    def __init__(self, filename):
        data = json.loads(lzma.LZMAFile(str(Path(filename).expanduser())).read().decode('utf-8'))
        if data.get("  version") != "sequence-database-v2":
            raise RuntimeError("Unrecognized sequence database version: {}".data.get("  version"))
        self.data = data["data"]
        self.make_index()
        self.find_hi_name = self.find_hi_name_using_index

    def make_index(self):
        self.hi_names = {}
        self.names = {}
        for e1 in self.data:
            self.names[e1["N"]] = e1
            for e2 in e1["s"]:
                if e2.get("h"):
                    self.hi_names[e2["h"]] = e2

    def find_name(self, raw_name):

        def find_passage(e1, passage):
            for e2 in e1["s"]:
                if (passage is not None and passage in e2["p"]) or (passage is None and not e2["p"]):
                    return e2
            return None

        raw_name = raw_name.replace("/HUMAN/", "/")
        # module_logger.info('find {}'.format(raw_name))
        seq = self.find_hi_name(raw_name)
        if seq is None:
            # module_logger.info('find {}'.format(raw_name))
            name, passage = self.split_name(raw_name)
            e1 = self.names.get(name)
            if e1:
                seq = find_passage(e1, passage)
                if seq is None and " (" in passage:   # passage with date, look for passage without date
                    seq = find_passage(e1, passage.split(" (")[0])
                if seq is None:
                    module_logger.warning('No passage {!r} {!r} in seqdb'.format(name, passage))
            else:
                module_logger.warning('No {!r} in seqdb ({})'.format(name, raw_name))
        return seq

    def find_hi_name_using_index(self, raw_name):
        return self.hi_names.get(raw_name)

    def find_hi_name_via_search(self, raw_name):
        for e1 in self.data:
            for e2 in e1["s"]:
                if e2.get("h") == raw_name:
                    return e2
        return None

    sReNameParts = re.compile(r"^(?P<name>(?:B|A\(H\d+N\d+\))/[^/]+/[^/]+/(?:19\d\d|20[0-2]\d))\s+(?:(?P<infix>\([^\)]+\))\s+)?(?P<passage>.+)?$")

    def split_name(self, raw_name):
        name = raw_name
        passage = None
        m = self.sReNameParts.match(raw_name)
        if m:
            name = m.group("name")
            if m.group("infix"):
                name += " " + m.group("infix")
            passage = m.group("passage")
        return name, passage


# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('source', nargs=1, help='source tree in the phylogenetic-tree-v1 format produced by newick2json.')
    parser.add_argument('result', nargs=1, help='resulting tree in the phylogenetic-tree-v1 format.')
    parser.add_argument('--clade', action='store_true', dest='add_clade_information', default=False, help='Add clade information to nodes.')
    parser.add_argument('--pos', action='store', dest='pos', default=None, help='Comma separated list of positions or "all". Add amino-acid information at this position to each node.')
    parser.add_argument('--branch-annotations', action='store_true', dest='branch_annotations', default=False, help='Add branch annotations.')
    parser.add_argument('--branch-ids', action='store_true', dest='branch_ids', default=False, help='Add branch ids.')
    parser.add_argument('--remove-aa-at', action='store_true', dest='remove_aa_at', default=False, help='Remove aa_at values to make json smaller and faster to process.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/WHO/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
