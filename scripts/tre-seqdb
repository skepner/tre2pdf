#! /usr/bin/env python3
# -*- Python -*-
# Copyright (c) 2016, The Center For Pathogen Evolution, Department of Zoology, University of Cambridge, UK
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE CENTER FOR PATHOGEN EVOLUTION BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Reads json in the phylogenetic-tree-v1 format produced by newick2json,
reads seqdb ("sequence-database-v1"),
updates tree with clade and amino-acid information for each leaf node.
"""

import sys, os, re, json, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

def main(args):
    exit_code = 0
    try:
        data = load_tree(args.source[0])
        seqdb = load_seqdb(os.path.expandvars(os.path.expanduser(args.path_to_db)))
        if args.add_clade_information:
            add_clade(data["tree"], seqdb)
        if args.pos is not None:
            add_amino_acid_at(data, seqdb, args.pos)
        save_tree(args.result[0], data)
    except Exception as err:
        print('ERROR: cannot execute command:', err, traceback.format_exc())
        exit_code = 1
    return exit_code

# ======================================================================

def add_clade(data, seqdb):
    clades = {}
    nodes = {"c": 0}

    def add_clade_r(node):
        # global clades, nodes, clade_desc, sequences
        if not node.get("subtree"):
            if node.get("name"):
                nodes["c"] += 1
                if "clades" in node: del node["clades"]   # delete old data
                seq = find_name_in_seqdb(seqdb, node["name"])
                if seq:
                    if seq.get("clades"):
                        node["clades"] = seq["clades"]
                        for c in seq["clades"]:
                            clades.setdefault(c, 0)
                            clades[c] += 1
                else:
                    pass # logging.warning("No sequence for {}".format(node["name"]))
        else:
            for e in node["subtree"]:
                add_clade_r(e)

    add_clade_r(data)
    logging.info('Nodes: {}  Clades {}'.format(nodes["c"], clades))

# ----------------------------------------------------------------------

def add_amino_acid_at(data, seqdb, pos):
    aas = {}
    pos_s = str(pos)
    transitions = set()

    def add_aa_r(node):
        used_aa = set()
        if not node.get("subtree"):
            if node.get("name"):
                if node.get("aa_at") and node["aa_at"].get(pos_s): del node["aa_at"][pos_s] # delete old data
                seq = find_name_in_seqdb(seqdb, node["name"])
                if seq and seq.get("aa") and seq.get("shift") is not None and len(seq["aa"]) >= (pos - seq["shift"]):
                    aa = seq["aa"][pos - 1 - seq["shift"]]
                    node.setdefault("aa_at", {})[pos_s] = aa   # note dict key must be str to be properly saveable and loadable into/from json
                    if aa in aas:
                        aas[aa] += 1
                    else:
                        aas[aa] = 1
                    used_aa.add(aa)
        else:
            used_in_subtree = [None] * len(node["subtree"])
            for no, e in enumerate(node["subtree"]):
                used = add_aa_r(e)
                if len(used) == 1:
                    used_in_subtree[no] = list(used)[0]
                used_aa |= used
            if used_in_subtree[0] not in [None, "X"]:
                for no, e in enumerate(node["subtree"][1:], start=1):
                    if e.get("subtree") and used_in_subtree[no] not in [None, "X"] and len(set(used_in_subtree[:no])) == 1 and used_in_subtree[no] != used_in_subtree[0]:
                        names = set(e.get("name", "").split())
                        transition = "{}{}{}".format(used_in_subtree[0], pos, used_in_subtree[no])
                        names.add(transition)
                        e["name"] = " ".join(sorted(names, key=lambda a: int(a[1:-1])))
                        transitions.add(e["name"])
                        # module_logger.info('{} {} {}'.format(e["name"], no, used_in_subtree))
        return used_aa

    add_aa_r(data["tree"])
    logging.info('AA: {}'.format(aas))
    logging.info('Transitions: {}'.format(transitions))
    if transitions:
        bas = data["_settings"]["tree"].get("branch_annotations", [])
        for tr in transitions:
            if not any(e for e in bas if e["_id"] == tr):
                bas.append({"_id": tr, "color": "#000000", "font_size": 9, "label": "\n".join(tr.split()), "label_interleave": 1.2, "label_offset_x": 0, "label_offset_y": 0, "line_color": "#000000", "line_width": 0.5, "line_x": -10, "line_y": 5, "show": True, "show_line": False})
        data["_settings"]["tree"]["branch_annotations"] = bas

# ----------------------------------------------------------------------

def find_name_in_seqdb(seqdb, raw_name):

    def find_passage(e1, passage):
        for e2 in e1["data"]:
            if (passage is not None and passage in e2["passages"]) or (passage is None and not e2["passages"]):
                return e2
        return None

    raw_name = raw_name.replace("/HUMAN/", "/")
    # module_logger.info('find {}'.format(raw_name))
    seq = find_hi_name_in_seqdb(seqdb, raw_name)
    if seq is None:
        name, passage = split_name(raw_name)
        e1 = seqdb.get(name)
        if e1:
            seq = find_passage(e1, passage)
            if seq is None and " (" in passage:   # passage with date, look for passage wihtout date
                seq = find_passage(e1, passage.split(" (")[0])
            if seq is None:
                module_logger.warning('No passage {!r} {!r} in seqdb'.format(name, passage))
        else:
            module_logger.warning('No {!r} in seqdb ({})'.format(name, raw_name))
    return seq

# ----------------------------------------------------------------------

def find_hi_name_in_seqdb(seqdb, raw_name):
    for e1 in seqdb.values():
        for e2 in e1["data"]:
            if e2.get("hi_name") == raw_name:
                return e2
    return None

# ----------------------------------------------------------------------

sReNameParts = re.compile(r"^(?P<name>(?:B|A\(H\d+N\d+\))/[^/]+/[^/]+/(?:19\d\d|20[0-2]\d))\s+(?:(?P<infix>\([^\)]+\))\s+)?(?P<passage>.+)?$")

def split_name(raw_name):
    name = raw_name
    passage = None
    m = sReNameParts.match(raw_name)
    if m:
        name = m.group("name")
        if m.group("infix"):
            name += " " + m.group("infix")
        passage = m.group("passage")
    return name, passage

# ----------------------------------------------------------------------

def load_tree(filename):
    data = json.load(sys.stdin if filename == "-" else open(filename))
    if data.get("  version") != "phylogenetic-tree-v1" or not isinstance(data.get("tree"), dict):
        raise RuntimeError("Unrecognized source data")
    return data

# ----------------------------------------------------------------------

def load_seqdb(filename):
    import lzma
    data = json.loads(lzma.LZMAFile(filename).read().decode('utf-8'))
    if data.get("  version") != "sequence-database-v1":
        raise RuntimeError("Unrecognized sequence database version: {}".data.get("  version"))
    return data["1-names"]

# ----------------------------------------------------------------------

def save_tree(filename, data):
    if filename != "-":
        backup_file(filename)
    json.dump(data, sys.stdout if filename == "-" else open(filename, "w"), indent=2, separators=(',', ': '), sort_keys=True)

# ----------------------------------------------------------------------

def backup_file(filename, backup_dir=None):
    """Backup the file, if it exists. Backups versioning is supported."""
    if isinstance(backup_dir, str):
        newname = os.path.join(backup_dir, os.path.basename(filename))
    else:
        newname = filename
    version = 1
    while os.access(newname, os.F_OK):
        newname = '{}.~{:02d}~'.format(filename, version)
        version += 1
    if newname != filename:
        #module_logger.debug("Backing up file: {} --> {}".format(filename, newname))
        try:
            os.rename(filename, newname)
        except Exception as err:
            module_logger.warning('Cannot create backup copy of {}: {}'.format(filename, err), exc_info=True)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('source', nargs=1, help='source tree in the phylogenetic-tree-v1 format produced by newick2json.')
    parser.add_argument('result', nargs=1, help='resulting tree in the phylogenetic-tree-v1 format.')
    parser.add_argument('--clade', action='store_true', dest='add_clade_information', default=False, help='Add clade information to nodes.')
    parser.add_argument('--pos', action='store', dest='pos', type=int, default=None, help='Add amino-acid information at this position to each node.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', default='~/GH/whocc-sequences/seqdb/seqdb.json.xz', help='Path to sequence database.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
